using Pkg.Artifacts

"""
writeDomain(shapeCircle=[36],shapeToroidal=[24,36],shapeCuboid=[1,1,1])

Writes the domains generated by simplexGrid() and cuboidGrid()
necessary for the functions of the Mapper.jl module in txt format

# Example
```julia
julia> writeDomain([36],[24,36],[1,1,1])
```
"""
function writeDomain(shapeCircle=[36],shapeToroidal=[24,36],shapeCuboid=[1,1,1])
    V,EV = Lar.cuboidGrid(shapeCircle)
    if !isdir("../domain")
        mkdir("../domain")
    end
    cd("..")
    open("domain/circleVertex.txt", "w") do io
        writedlm(io, V)
    end
    open("domain/circleEdge.txt", "w") do io
        writedlm(io, hcat(EV...))
    end
    V,CV = Lar.simplexGrid(shapeToroidal)
    open("domain/toroidalVertex.txt", "w") do io
        writedlm(io, V)
    end
    open("domain/toroidalEdge.txt", "w") do io
        writedlm(io, hcat(CV...))
    end
    V,EV = Lar.cuboidGrid(shapeCuboid)
    open("domain/cuboidVertex.txt", "w") do io
        writedlm(io, V)
    end
    open("domain/cuboidEdge.txt", "w") do io
        writedlm(io, hcat(EV...))
    end
end

"""
createArtifacts()

The file is created Artifacts.toml containing the hash of the artifact
and the link where it can be found if it is not available locally

# Example
```julia
julia> createArtifacts()
```
"""
function createArtifacts()
    cd("..")
    hash = create_artifact() do dir
        cp("domain/circleVertex.txt", joinpath(dir, "circleVertex.txt"))
        cp("domain/circleEdge.txt", joinpath(dir, "circleEdge.txt"))
        cp("domain/toroidalVertex.txt", joinpath(dir, "toroidalVertex.txt"))
        cp("domain/toroidalEdge.txt", joinpath(dir, "toroidalEdge.txt"))
        cp("domain/cuboidVertex.txt", joinpath(dir, "cuboidVertex.txt"))
        cp("domain/cuboidEdge.txt", joinpath(dir, "cuboidEdge.txt"))
    end
    tarball_hash = archive_artifact(hash, "domain.tar.gz")
    bind_artifact!("Artifacts.toml", "domain", hash,
        download_info=[("https://github.com/Asprofumo/Mapper.jl/blob/main/domain.tar.gz", 
                        tarball_hash)])
end

"""
readArtifactsCircle()

Recover the domain of the circumference saved on the artifacts
and restore the appropriate format (matrix and vector of vectors).

# Example
```julia
julia> readArtifactsCircle()
```
"""
function readArtifactsCircle()
    vertex = joinpath(artifact"domain", "circleVertex.txt")
    V = readdlm(vertex, '\t', Float64, '\n', use_mmap=true, dims=(1,37))
    edge = joinpath(artifact"domain", "circleEdge.txt")
    ev = readdlm(edge, '\t', Int64, '\n', use_mmap=true, dims=(2,36))
    EV = Array{Int64,1}[]
    for col in eachcol(ev)
        push!(EV,col)
    end
    V,EV
end

"""
readArtifactsToroidalThreads()

Recover the domain of the toroidal saved on the artifacts
and restore the appropriate format (matrix and vector of vectors) using multiple threads.

# Example
```julia
julia> readArtifactsToroidalThreads()
```
"""
function readArtifactsToroidalThreads() 
    edge() = readdlm(joinpath(artifact"domain", "toroidalEdge.txt"), '\t', Int64, '\n', use_mmap=true, dims=(3,1728))
    vertex() = readdlm(joinpath(artifact"domain", "toroidalVertex.txt"), '\t', Float64, '\n', use_mmap=true, dims=(2,925))
    t1 = Base.Threads.@spawn edge()
    t2 = Base.Threads.@spawn vertex()
    EV = Array{Int64,1}[]
    ev = fetch(t1)
    for col in eachcol(ev)
        push!(EV,col)
    end
    V = fetch(t2)
    V,EV
end

"""
readArtifactsCuboid()

Recover the domain of the cuboid saved on the artifacts
and restore the appropriate format (matrix and vector of vectors).

# Example
```julia
julia> rreadArtifactsCuboid()
```
"""
function readArtifactsCuboid()
    vertex = joinpath(artifact"domain", "cuboidVertex.txt")
    V = readdlm(vertex, '\t', Float64, '\n', use_mmap=true, dims=(3,8))
    edge = joinpath(artifact"domain", "cuboidEdge.txt")
    ev = readdlm(edge, '\t', Int64, '\n', use_mmap=true, dims=(8,1))
    EV = Array{Int64,1}[]
    for col in eachcol(ev)
        push!(EV,col)
    end
    V,EV
end


function circle_map(u,radius)
    [radius*cos(u); radius*sin(u)]
end

function helix_map(u,radius,pitch)
    [radius*cos(u);radius*sin(u);(pitch/(2*pi))*u]
end